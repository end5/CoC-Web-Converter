export interface Token {
    type: TokenType;
    start: number;
    length: number;
    // text: string;
}

export enum TokenType {
    FIRST = 1,
    EOS = FIRST,
    MINUS,
    MINUSMINUS,
    NOT,
    NOTEQUALS,
    STRICTNOTEQUALS,
    MODULUS,
    MODULUSASSIGN,
    BITWISEAND,
    LOGICALAND,
    LOGICALANDASSIGN,
    BITWISEANDASSIGN,
    LEFTPAREN,
    RIGHTPAREN,
    MULT,
    MULTASSIGN,
    COMMA,
    DOT,
    DOUBLEDOT,
    TRIPLEDOT,
    DOTLESSTHAN,
    DIV,
    DIVASSIGN,
    COLON,
    DOUBLECOLON,
    SEMICOLON,
    QUESTIONMARK,
    ATSIGN,
    LEFTBRACKET,
    RIGHTBRACKET,
    BITWISEXOR,
    LOGICALXOR,
    LOGICALXORASSIGN,
    BITWISEXORASSIGN,
    LEFTBRACE,
    BITWISEOR,
    LOGICALOR,
    LOGICALORASSIGN,
    BITWISEORASSIGN,
    RIGHTBRACE,
    BITWISENOT,
    PLUS,
    PLUSPLUS,
    PLUSASSIGN,
    LESSTHAN,
    LEFTSHIFT,
    LEFTSHIFTASSIGN,
    LESSTHANOREQUALS,
    ASSIGN,
    MINUSASSIGN,
    EQUALS,
    STRICTEQUALS,
    GREATERTHAN,
    GREATERTHANOREQUALS,
    RIGHTSHIFT,
    RIGHTSHIFTASSIGN,
    UNSIGNEDRIGHTSHIFT,
    UNSIGNEDRIGHTSHIFTASSIGN,
    ABSTRACT,
    AS,
    BREAK,
    CASE,
    CATCH,
    CLASS,
    CONST,
    CONTINUE,
    DEBUGGER,
    DEFAULT,
    DELETE,
    DO,
    ELSE,
    ENUM,
    EXTENDS,
    FALSE,
    FINAL,
    FINALLY,
    FOR,
    FUNCTION,
    GET,
    GOTO,
    IF,
    IMPLEMENTS,
    IMPORT,
    IN,
    INCLUDE,
    INSTANCEOF,
    INTERFACE,
    IS,
    NAMESPACE,
    CONFIG,
    NATIVE,
    NEW,
    NULL,
    PACKAGE,
    PRIVATE,
    PROTECTED,
    PUBLIC,
    RETURN,
    SET,
    STATIC,
    SUPER,
    SWITCH,
    SYNCHRONIZED,
    THIS,
    THROW,
    THROWS,
    TRANSIENT,
    TRUE,
    TRY,
    TYPEOF,
    USE,
    VAR,
    VOID,
    VOLATILE,
    WHILE,
    WITH,
    IDENTIFIER,
    NUMBERLITERAL,
    REGEXPLITERAL,
    STRINGLITERAL,
    NEGMINLONGLITERAL,
    XMLLITERAL,
    XMLPART,
    XMLMARKUP,
    XMLTEXT,
    XMLTAGENDEND,
    XMLTAGSTARTEND,
    ATTRIBUTEIDENTIFIER,
    DOCCOMMENT,
    BLOCKCOMMENT,
    SLASHSLASHCOMMENT,

    EOL,

    EMPTY,
    ERROR,
    LAST = ERROR,
}

export const tokenClassNames = [
    "<unused index>",
    "end of program",
    "minus",
    "minusminus",
    "not",
    "notequals",
    "strictnotequals",
    "modulus",
    "modulusassign",
    "bitwiseand",
    "logicaland",
    "logicalandassign",
    "bitwiseandassign",
    "leftparen",
    "rightparen",
    "mult",
    "multassign",
    "comma",
    "dot",
    "doubledot",
    "tripledot",
    "dotlessthan",
    "div",
    "divassign",
    "colon",
    "doublecolon",
    "semicolon",
    "questionmark",
    "atsign",
    "leftbracket",
    "rightbracket",
    "bitwisexor",
    "logicalxor",
    "logicalxorassign",
    "bitwisexorassign",
    "leftbrace",
    "bitwiseor",
    "logicalor",
    "logicalorassign",
    "bitwiseorassign",
    "rightbrace",
    "bitwisenot",
    "plus",
    "plusplus",
    "plusassign",
    "lessthan",
    "leftshift",
    "leftshiftassign",
    "lessthanorequals",
    "assign",
    "minusassign",
    "equals",
    "strictequals",
    "greaterthan",
    "greaterthanorequals",
    "rightshift",
    "rightshiftassign",
    "unsignedrightshift",
    "unsignedrightshiftassign",
    "abstract",
    "as",
    "break",
    "case",
    "catch",
    "class",
    "const",
    "continue",
    "debugger",
    "default",
    "delete",
    "do",
    "else",
    "enum",
    "extends",
    "false",
    "final",
    "finally",
    "for",
    "function",
    "get",
    "goto",
    "if",
    "implements",
    "import",
    "in",
    "include",
    "instanceof",
    "interface",
    "is",
    "namespace",
    "config",
    "native",
    "new",
    "null",
    "package",
    "private",
    "protected",
    "public",
    "return",
    "set",
    "static",
    "super",
    "switch",
    "synchronized",
    "this",
    "throw",
    "throws",
    "transient",
    "true",
    "try",
    "typeof",
    "use",
    "var",
    "void",
    "volatile",
    "while",
    "with",
    "identifier",
    "numberliteral",
    "regexpliteral",
    "stringliteral",
    "negminlongliteral",
    "xmlliteral",
    "xmlpart",
    "xmlmarkup",
    "xmltext",
    "xmltagendend",
    "xmltagstartend",
    "attributeidentifier",
    "docComment",
    "blockComment",
    "slashslashcomment",

    "end of line",
    "<empty>",
    "<error>",
    "abbrev_mode",
    "full_mode"
];
